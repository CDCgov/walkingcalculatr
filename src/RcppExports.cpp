// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// haverDist
double haverDist(double lonA, double latA, double lonB, double latB, int EARTH_RADIUS_METERS);
RcppExport SEXP _walkingcalculatr_haverDist(SEXP lonASEXP, SEXP latASEXP, SEXP lonBSEXP, SEXP latBSEXP, SEXP EARTH_RADIUS_METERSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lonA(lonASEXP);
    Rcpp::traits::input_parameter< double >::type latA(latASEXP);
    Rcpp::traits::input_parameter< double >::type lonB(lonBSEXP);
    Rcpp::traits::input_parameter< double >::type latB(latBSEXP);
    Rcpp::traits::input_parameter< int >::type EARTH_RADIUS_METERS(EARTH_RADIUS_METERSSEXP);
    rcpp_result_gen = Rcpp::wrap(haverDist(lonA, latA, lonB, latB, EARTH_RADIUS_METERS));
    return rcpp_result_gen;
END_RCPP
}
// haverDistVector
NumericVector haverDistVector(NumericVector lon, NumericVector lat, int EARTH_RADIUS_METERS);
RcppExport SEXP _walkingcalculatr_haverDistVector(SEXP lonSEXP, SEXP latSEXP, SEXP EARTH_RADIUS_METERSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< int >::type EARTH_RADIUS_METERS(EARTH_RADIUS_METERSSEXP);
    rcpp_result_gen = Rcpp::wrap(haverDistVector(lon, lat, EARTH_RADIUS_METERS));
    return rcpp_result_gen;
END_RCPP
}
// findAng
double findAng(double lonA, double latA, double lonB, double latB, double lonC, double latC);
RcppExport SEXP _walkingcalculatr_findAng(SEXP lonASEXP, SEXP latASEXP, SEXP lonBSEXP, SEXP latBSEXP, SEXP lonCSEXP, SEXP latCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lonA(lonASEXP);
    Rcpp::traits::input_parameter< double >::type latA(latASEXP);
    Rcpp::traits::input_parameter< double >::type lonB(lonBSEXP);
    Rcpp::traits::input_parameter< double >::type latB(latBSEXP);
    Rcpp::traits::input_parameter< double >::type lonC(lonCSEXP);
    Rcpp::traits::input_parameter< double >::type latC(latCSEXP);
    rcpp_result_gen = Rcpp::wrap(findAng(lonA, latA, lonB, latB, lonC, latC));
    return rcpp_result_gen;
END_RCPP
}
// findAngVector
NumericVector findAngVector(NumericVector lon, NumericVector lat, NumericVector dist);
RcppExport SEXP _walkingcalculatr_findAngVector(SEXP lonSEXP, SEXP latSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(findAngVector(lon, lat, dist));
    return rcpp_result_gen;
END_RCPP
}
// makeLoIsStillHelper
LogicalVector makeLoIsStillHelper(LogicalVector ret, NumericVector accuracy, NumericVector lonDeg, NumericVector latDeg, NumericVector userFactor);
RcppExport SEXP _walkingcalculatr_makeLoIsStillHelper(SEXP retSEXP, SEXP accuracySEXP, SEXP lonDegSEXP, SEXP latDegSEXP, SEXP userFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type ret(retSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type accuracy(accuracySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lonDeg(lonDegSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type latDeg(latDegSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type userFactor(userFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(makeLoIsStillHelper(ret, accuracy, lonDeg, latDeg, userFactor));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_walkingcalculatr_haverDist", (DL_FUNC) &_walkingcalculatr_haverDist, 5},
    {"_walkingcalculatr_haverDistVector", (DL_FUNC) &_walkingcalculatr_haverDistVector, 3},
    {"_walkingcalculatr_findAng", (DL_FUNC) &_walkingcalculatr_findAng, 6},
    {"_walkingcalculatr_findAngVector", (DL_FUNC) &_walkingcalculatr_findAngVector, 3},
    {"_walkingcalculatr_makeLoIsStillHelper", (DL_FUNC) &_walkingcalculatr_makeLoIsStillHelper, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_walkingcalculatr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
